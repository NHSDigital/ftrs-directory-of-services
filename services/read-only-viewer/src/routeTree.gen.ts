/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as OrganisationsIndexImport } from './routes/organisations/index'
import { Route as LocationsIndexImport } from './routes/locations/index'
import { Route as HealthcareServicesIndexImport } from './routes/healthcare-services/index'
import { Route as OrganisationsOrganisationIDIndexImport } from './routes/organisations/$organisationID.index'
import { Route as LocationsLocationIDIndexImport } from './routes/locations/$locationID.index'
import { Route as HealthcareServicesHealthcareServiceIDIndexImport } from './routes/healthcare-services/$healthcareServiceID.index'
import { Route as OrganisationsOrganisationIDEndpointEndpointIDImport } from './routes/organisations/$organisationID.endpoint.$endpointID'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const OrganisationsIndexRoute = OrganisationsIndexImport.update({
  id: '/organisations/',
  path: '/organisations/',
  getParentRoute: () => rootRoute,
} as any)

const LocationsIndexRoute = LocationsIndexImport.update({
  id: '/locations/',
  path: '/locations/',
  getParentRoute: () => rootRoute,
} as any)

const HealthcareServicesIndexRoute = HealthcareServicesIndexImport.update({
  id: '/healthcare-services/',
  path: '/healthcare-services/',
  getParentRoute: () => rootRoute,
} as any)

const OrganisationsOrganisationIDIndexRoute =
  OrganisationsOrganisationIDIndexImport.update({
    id: '/organisations/$organisationID/',
    path: '/organisations/$organisationID/',
    getParentRoute: () => rootRoute,
  } as any)

const LocationsLocationIDIndexRoute = LocationsLocationIDIndexImport.update({
  id: '/locations/$locationID/',
  path: '/locations/$locationID/',
  getParentRoute: () => rootRoute,
} as any)

const HealthcareServicesHealthcareServiceIDIndexRoute =
  HealthcareServicesHealthcareServiceIDIndexImport.update({
    id: '/healthcare-services/$healthcareServiceID/',
    path: '/healthcare-services/$healthcareServiceID/',
    getParentRoute: () => rootRoute,
  } as any)

const OrganisationsOrganisationIDEndpointEndpointIDRoute =
  OrganisationsOrganisationIDEndpointEndpointIDImport.update({
    id: '/organisations/$organisationID/endpoint/$endpointID',
    path: '/organisations/$organisationID/endpoint/$endpointID',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/healthcare-services/': {
      id: '/healthcare-services/'
      path: '/healthcare-services'
      fullPath: '/healthcare-services'
      preLoaderRoute: typeof HealthcareServicesIndexImport
      parentRoute: typeof rootRoute
    }
    '/locations/': {
      id: '/locations/'
      path: '/locations'
      fullPath: '/locations'
      preLoaderRoute: typeof LocationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/organisations/': {
      id: '/organisations/'
      path: '/organisations'
      fullPath: '/organisations'
      preLoaderRoute: typeof OrganisationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/healthcare-services/$healthcareServiceID/': {
      id: '/healthcare-services/$healthcareServiceID/'
      path: '/healthcare-services/$healthcareServiceID'
      fullPath: '/healthcare-services/$healthcareServiceID'
      preLoaderRoute: typeof HealthcareServicesHealthcareServiceIDIndexImport
      parentRoute: typeof rootRoute
    }
    '/locations/$locationID/': {
      id: '/locations/$locationID/'
      path: '/locations/$locationID'
      fullPath: '/locations/$locationID'
      preLoaderRoute: typeof LocationsLocationIDIndexImport
      parentRoute: typeof rootRoute
    }
    '/organisations/$organisationID/': {
      id: '/organisations/$organisationID/'
      path: '/organisations/$organisationID'
      fullPath: '/organisations/$organisationID'
      preLoaderRoute: typeof OrganisationsOrganisationIDIndexImport
      parentRoute: typeof rootRoute
    }
    '/organisations/$organisationID/endpoint/$endpointID': {
      id: '/organisations/$organisationID/endpoint/$endpointID'
      path: '/organisations/$organisationID/endpoint/$endpointID'
      fullPath: '/organisations/$organisationID/endpoint/$endpointID'
      preLoaderRoute: typeof OrganisationsOrganisationIDEndpointEndpointIDImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/healthcare-services': typeof HealthcareServicesIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/organisations': typeof OrganisationsIndexRoute
  '/healthcare-services/$healthcareServiceID': typeof HealthcareServicesHealthcareServiceIDIndexRoute
  '/locations/$locationID': typeof LocationsLocationIDIndexRoute
  '/organisations/$organisationID': typeof OrganisationsOrganisationIDIndexRoute
  '/organisations/$organisationID/endpoint/$endpointID': typeof OrganisationsOrganisationIDEndpointEndpointIDRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/healthcare-services': typeof HealthcareServicesIndexRoute
  '/locations': typeof LocationsIndexRoute
  '/organisations': typeof OrganisationsIndexRoute
  '/healthcare-services/$healthcareServiceID': typeof HealthcareServicesHealthcareServiceIDIndexRoute
  '/locations/$locationID': typeof LocationsLocationIDIndexRoute
  '/organisations/$organisationID': typeof OrganisationsOrganisationIDIndexRoute
  '/organisations/$organisationID/endpoint/$endpointID': typeof OrganisationsOrganisationIDEndpointEndpointIDRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/healthcare-services/': typeof HealthcareServicesIndexRoute
  '/locations/': typeof LocationsIndexRoute
  '/organisations/': typeof OrganisationsIndexRoute
  '/healthcare-services/$healthcareServiceID/': typeof HealthcareServicesHealthcareServiceIDIndexRoute
  '/locations/$locationID/': typeof LocationsLocationIDIndexRoute
  '/organisations/$organisationID/': typeof OrganisationsOrganisationIDIndexRoute
  '/organisations/$organisationID/endpoint/$endpointID': typeof OrganisationsOrganisationIDEndpointEndpointIDRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/healthcare-services'
    | '/locations'
    | '/organisations'
    | '/healthcare-services/$healthcareServiceID'
    | '/locations/$locationID'
    | '/organisations/$organisationID'
    | '/organisations/$organisationID/endpoint/$endpointID'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/healthcare-services'
    | '/locations'
    | '/organisations'
    | '/healthcare-services/$healthcareServiceID'
    | '/locations/$locationID'
    | '/organisations/$organisationID'
    | '/organisations/$organisationID/endpoint/$endpointID'
  id:
    | '__root__'
    | '/'
    | '/healthcare-services/'
    | '/locations/'
    | '/organisations/'
    | '/healthcare-services/$healthcareServiceID/'
    | '/locations/$locationID/'
    | '/organisations/$organisationID/'
    | '/organisations/$organisationID/endpoint/$endpointID'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HealthcareServicesIndexRoute: typeof HealthcareServicesIndexRoute
  LocationsIndexRoute: typeof LocationsIndexRoute
  OrganisationsIndexRoute: typeof OrganisationsIndexRoute
  HealthcareServicesHealthcareServiceIDIndexRoute: typeof HealthcareServicesHealthcareServiceIDIndexRoute
  LocationsLocationIDIndexRoute: typeof LocationsLocationIDIndexRoute
  OrganisationsOrganisationIDIndexRoute: typeof OrganisationsOrganisationIDIndexRoute
  OrganisationsOrganisationIDEndpointEndpointIDRoute: typeof OrganisationsOrganisationIDEndpointEndpointIDRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HealthcareServicesIndexRoute: HealthcareServicesIndexRoute,
  LocationsIndexRoute: LocationsIndexRoute,
  OrganisationsIndexRoute: OrganisationsIndexRoute,
  HealthcareServicesHealthcareServiceIDIndexRoute:
    HealthcareServicesHealthcareServiceIDIndexRoute,
  LocationsLocationIDIndexRoute: LocationsLocationIDIndexRoute,
  OrganisationsOrganisationIDIndexRoute: OrganisationsOrganisationIDIndexRoute,
  OrganisationsOrganisationIDEndpointEndpointIDRoute:
    OrganisationsOrganisationIDEndpointEndpointIDRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/healthcare-services/",
        "/locations/",
        "/organisations/",
        "/healthcare-services/$healthcareServiceID/",
        "/locations/$locationID/",
        "/organisations/$organisationID/",
        "/organisations/$organisationID/endpoint/$endpointID"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/healthcare-services/": {
      "filePath": "healthcare-services/index.tsx"
    },
    "/locations/": {
      "filePath": "locations/index.tsx"
    },
    "/organisations/": {
      "filePath": "organisations/index.tsx"
    },
    "/healthcare-services/$healthcareServiceID/": {
      "filePath": "healthcare-services/$healthcareServiceID.index.tsx"
    },
    "/locations/$locationID/": {
      "filePath": "locations/$locationID.index.tsx"
    },
    "/organisations/$organisationID/": {
      "filePath": "organisations/$organisationID.index.tsx"
    },
    "/organisations/$organisationID/endpoint/$endpointID": {
      "filePath": "organisations/$organisationID.endpoint.$endpointID.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
