name: AWS Well Architected Framework Checks

# checkov:skip=CKV_GHA_7:Workflow dispatch inputs are required for manual triggering with environment selection
on:
  workflow_dispatch:
    inputs:
      type:
        description: "Type of workflow (app or account)"
        required: true
        default: "app"
        type: choice
        options:
          - app
          - account
      environment:
        description: "Defines the Github environment from which to pull environment variables from"
        required: true
        type: choice
        options:
          - dev
          - test
          - mgmt
      tag:
        description: "The git tag to checkout or, if not passed in, the current branch"
        required: false
        type: string
  schedule:
    - cron: "0 0 * * *"

permissions:
  contents: read
  id-token: write

jobs:
  run-matrix:
    runs-on: ubuntu-latest
    environment: ${{ matrix.environment }}
    strategy:
      matrix:
        include:
          - type: app
            environment: dev
          - type: app
            environment: test
          - type: account
            environment: mgmt
      fail-fast: false

    steps:
      - name: Check if should run
        id: should-run
        run: |
          SHOULD_RUN="true"

          # If manually triggered, check if this matrix entry matches the inputs
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Check type matches
            if [[ "${{ matrix.type }}" != "${{ inputs.type }}" ]]; then
              SHOULD_RUN="false"
            fi

            # Check environment matches (if specified)
            if [[ -n "${{ inputs.environment }}" ]] && [[ "${{ matrix.environment }}" != "${{ inputs.environment }}" ]]; then
              SHOULD_RUN="false"
            fi
          fi

          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "Should run: $SHOULD_RUN"

      - name: Checkout repository
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/checkout@v5
        with:
          ref: ${{ inputs.tag }}

      - name: Set environment output
        if: steps.should-run.outputs.should_run == 'true'
        id: set-env
        run: |
          # Set the environment value to GITHUB_OUTPUT
          echo "environment=${{ matrix.environment }}" >> $GITHUB_OUTPUT
          echo "Selected environment: ${{ matrix.environment }}"

      - name: "Configure AWS credentials"
        if: steps.should-run.outputs.should_run == 'true'
        uses: ./.github/actions/configure-credentials
        with:
          aws_account_id: ${{ secrets.ACCOUNT_ID }}
          aws_region: ${{ vars.AWS_REGION }}
          type: ${{ matrix.type }}

      # Assume steampipe-readonly-role using role chaining
      - name: Assume steampipe-readonly-role
        if: steps.should-run.outputs.should_run == 'true'
        uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/steampipe-readonly-role
          role-chaining: true
          role-session-name: GitHubActionsSteampipe
          aws-region: ${{ vars.AWS_REGION }}

      # Install Steampipe using GitHub Action
      - name: Setup Steampipe
        if: steps.should-run.outputs.should_run == 'true'
        uses: turbot/steampipe-action-setup@v1
        with:
          steampipe-version: "latest"
          plugin-connections: |
            connection "aws" {
                plugin     = "aws"
                regions    = ["us-east-1", "eu-west-2"]
            }

      # Install Powerpipe CLI using Github Action
      - name: Install Powerpipe
        uses: turbot/powerpipe-action-setup@v1

      # Install the AWS Well-Architected Framework mod
      - name: Install AWS Well Architected mod
        if: steps.should-run.outputs.should_run == 'true'
        run: |
          mkdir -p mods
          cd mods
          powerpipe mod init
          powerpipe mod install turbot/aws_well_architected

      # Run the Powerpipe report
      - name: Run AWS Well Architected Framework checks
        if: steps.should-run.outputs.should_run == 'true'
        id: generate_reports
        run: |
          mkdir -p reports
          cd mods
          DATE=$(date +%Y-%m-%d)
          echo "Generating reports with date stamp: $DATE"
          # Generate JSON report
          if ! powerpipe benchmark run well_architected_framework --output json > "../reports/aws_wafr_report_${DATE}.json"; then
            echo "Warning: JSON report generation had issues but continuing..."
          fi
          # Generate HTML report
          if ! powerpipe benchmark run well_architected_framework --output html > "../reports/aws_wafr_report_${DATE}.html"; then
            echo "Warning: HTML report generation had issues but continuing..."
          fi

      # Upload report artifacts for download
      - name: Upload reports
        if: steps.should-run.outputs.should_run == 'true'
        uses: actions/upload-artifact@v4.6.1
        with:
          name: aws-wafr-reports-${{ matrix.type }}-${{ matrix.environment }}
          path: reports/
          if-no-files-found: warn
          retention-days: 90
