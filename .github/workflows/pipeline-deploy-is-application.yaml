name: Integrated Search Application Deployment Pipeline
# Intended to run if
# - dependabot PR is labelled Test Ready
# - changes pushed to task branch
# - changes pushed to main branch
on:
  push:
    branches:
      - main
      - 'task/DOSIS*'
  workflow_dispatch:
    inputs:
      tag:
        description: "Specify the tag to be used for deployment"
        required: true
        type: string
      application_tag:
        description: "Specify the application tag to be used for deployment"
        required: true
        type: string
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev

jobs:
  metadata:
    if: ( ${{ github.event.label.name == 'Test Ready' && startswith(github.head_ref, 'dependabot/') }} ) || ( ${{ github.event_name == 'push' }} && ( ${{ startswith(github.ref_name, 'task/') || startswith(github.ref_name, 'main') }} ) )
    name: "Get Metadata"
    uses: ./.github/workflows/metadata.yaml

  quality-checks:
    name: "Quality Check"
    needs:
      [
        metadata,
      ]
    if: ${{ github.event_name == 'push' }}
    uses: ./.github/workflows/quality-checks.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      stacks: "['gp_search']"
    secrets: inherit

  build-gp-search-service:
    name: "Build GP Search API Service"
    needs:
      [
        metadata,
        quality-checks,
      ]
    uses: ./.github/workflows/build-project.yaml
    with:
      name: "gp-search"
      build_type: "service"
      python_version: ${{ needs.metadata.outputs.python_version }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      environment: ${{ needs.metadata.outputs.mgmt_environment }}
      repo_name: ${{ needs.metadata.outputs.reponame }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      application_tag: ${{ inputs.application_tag || 'latest' }}
    secrets: inherit

  deploy-infrastructure-plan:
    name: "TF Plan IS level infrastructure"
    needs:
      [
        metadata,
        quality-checks,
        build-gp-search-service,
      ]
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      domain: ${{ needs.metadata.outputs.reponame }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      tag: ${{ inputs.tag }}
      stacks: "['gp_search'],['is_performance']"
      application_tag: ${{ inputs.application_tag || 'latest' }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      action: plan
    secrets: inherit

  manual-approval:
    name: "Manual approval for IS level infrastructure deployment"
    if: ${{ needs.deploy-infrastructure-plan.outputs.plan_result == 'true' }}
    needs:
      [
        metadata,
        deploy-infrastructure-plan,
        build-gp-search-service,
      ]
    runs-on: ubuntu-latest
    environment: "${{ needs.metadata.outputs.environment }}-protected"
    steps:
      - name: Approval required
        run: echo "Deployment paused for manual approval. Please approve in the Actions tab."

  deploy-is-account-infrastructure-apply:
    name: "TFApply for IS  infrastructure"
    needs:
      [
        metadata,
        manual-approval,
      ]
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      domain: ${{ needs.metadata.outputs.reponame }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      tag: ${{ inputs.tag }}
      stacks: "['gp_search']"
      application_tag: ${{ inputs.application_tag || 'latest' }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      action: apply
      workflow_timeout: 30
    secrets: inherit

  service-automation-tests:
    name: Run service automation tests
    needs:
      [ metadata,
        deploy-is-account-infrastructure-apply,
      ]
    if: always() && !cancelled() && (needs.deploy-is-account-infrastructure-apply.result == 'success' || needs.manual-approval.result == 'skipped')
    uses: ./.github/workflows/service-automation-test.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      tag: ${{ inputs.tag }}
      test_tag: "is-pipeline"
      test_type: "api"
    secrets: inherit


  check-pipeline-status:
    name: "Check Pipeline Status"
    needs:
      - deploy-is-account-infrastructure-apply
      - service-automation-tests
    if: always()
    uses: ./.github/workflows/pipeline-status-check.yaml

  slack-notifications:
    name: "Send Notification to Slack"
    needs: [
      metadata,
      quality-checks,
      deploy-is-account-infrastructure-apply,
      service-automation-tests,
      check-pipeline-status,
    ]
    if: always()
    uses: ./.github/workflows/slack-notifications.yaml
    with:
      env: ${{ needs.metadata.outputs.environment }}
    secrets: inherit
