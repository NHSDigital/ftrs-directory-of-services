name: Future DoS Application Deployment Pipeline

on:
  push:
    branches:
      - main
      - "task/FDOS*"
      - "task/SIA*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Specify the tag to be used for deployment"
        required: true
        type: string
      application_tag:
        description: "Specify the application tag to be used for deployment"
        required: true
        type: string
      environment:
        description: "Deployment environment"
        required: true
        default: "dev"
        type: choice
        options:
          - dev
          - test
          - sandpit
          - int
          - prod

jobs:
  metadata:
    name: "Get CI/CD metadata"
    uses: ./.github/workflows/metadata.yaml

  quality-checks:
    name: "Quality check"
    needs:
      - metadata
    uses: ./.github/workflows/quality-checks.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      stacks: "['database', 'crud_apis', 'data_migration', 'read_only_viewer', 'opensearch', 'etl_ods']"
      type: app
    secrets: inherit

  build-services:
    name: "Build ${{ matrix.name }}"
    needs:
      - metadata
      - quality-checks
    strategy:
      matrix:
        include:
          - name: "python"
            build_type: "package"
          - name: "crud-apis"
            build_type: "service"
          - name: "data-migration"
            build_type: "service"
          - name: "read-only-viewer"
            build_type: "service"
          - name: "etl-ods"
            build_type: "service"
    uses: ./.github/workflows/build-project.yaml
    with:
      name: ${{ matrix.name }}
      build_type: ${{ matrix.build_type }}
      python_version: ${{ needs.metadata.outputs.python_version }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      environment: ${{ needs.metadata.outputs.mgmt_environment }}
      repo_name: ${{ needs.metadata.outputs.reponame }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      application_tag: ${{ inputs.application_tag || 'latest' }}
      type: app
    secrets: inherit

  perform-code-analysis:
    name: "Perform static code analysis"
    needs:
      - metadata
      - build-services
    uses: ./.github/workflows/static-code-analysis.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
    secrets: inherit

  plan-infrastructure:
    name: "Plan application infrastructure deployment"
    concurrency:
      group: "${{ needs.metadata.outputs.environment }}-protected"
      cancel-in-progress: false
    needs:
      - metadata
      - build-services
      - perform-code-analysis
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      stacks: "['database', 'crud_apis', 'data_migration', 'read_only_viewer', 'opensearch', 'etl_ods']"
      application_tag: ${{ inputs.application_tag || 'latest' }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      action: plan
      type: app
    secrets: inherit

  manual-approval:
    name: "Manual approval for deployment deployment"
    if: ${{ needs.plan-infrastructure.outputs.plan_result == 'true' }}
    needs:
      - metadata
      - plan-infrastructure
    runs-on: ubuntu-latest
    environment: "${{ needs.metadata.outputs.environment }}-protected"
    steps:
      - name: Approval required
        run: echo "Deployment paused for manual approval. Please approve in the Actions tab."

  apply-infrastructure:
    name: "Apply application infrastructure"
    concurrency:
      group: "${{ needs.metadata.outputs.environment }}-protected"
      cancel-in-progress: false
    needs:
      - metadata
      - manual-approval
    uses: ./.github/workflows/deploy-infrastructure.yaml
    with:
      environment: ${{ needs.metadata.outputs.environment }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      stacks: "['database', 'crud_apis', 'data_migration', 'read_only_viewer', 'opensearch', 'etl_ods']"
      application_tag: ${{ inputs.application_tag || 'latest' }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      action: apply
      type: app
      workflow_timeout: 30
    secrets: inherit

  deploy-read-only-viewer-service:
    name: "Deploy read only viewer service"
    concurrency:
      group: "${{ needs.metadata.outputs.environment }}-protected"
      cancel-in-progress: false
    needs:
      - metadata
      - apply-infrastructure
    uses: ./.github/workflows/deploy-frontend-project.yaml
    with:
      name: "read-only-viewer"
      build_type: "service"
      python_version: ${{ needs.metadata.outputs.python_version }}
      commit_hash: ${{ needs.metadata.outputs.commit_hash }}
      environment: ${{ needs.metadata.outputs.environment }}
      repo_name: ${{ needs.metadata.outputs.reponame }}
      workspace: ${{ needs.metadata.outputs.workspace }}
      application_tag: ${{ inputs.application_tag || 'latest' }}
      type: "app"
    secrets: inherit

  check-pipeline-status:
    name: "Check Pipeline Status"
    needs:
      - deploy-read-only-viewer-service
    if: always()
    uses: ./.github/workflows/pipeline-status-check.yaml

  slack-notifications:
    name: "Send Notification to Slack"
    needs:
      - metadata
      - quality-checks
      - build-services
      - plan-infrastructure
      - manual-approval
      - apply-infrastructure
      - deploy-read-only-viewer-service
      - check-pipeline-status
    if: always()
    uses: ./.github/workflows/slack-notifications.yaml
    with:
      env: ${{ needs.metadata.outputs.environment }}
    secrets: inherit
