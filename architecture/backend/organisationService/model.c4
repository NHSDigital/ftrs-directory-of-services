model {

  extend ftrs {
    container externalAPIs "Externally Facing APIs" {
      description 'APIs for internal use only'

      restapi organisationAPI "FTRS Organisation API" {
        description '
          Implements query business logic
          and exposes as REST API
        '
        controller orgController "Queries" {
          description 'Processes any queries on FTRS data'
          lambda orgByOdsCode "Get Organisation by ODS Code" {
            description 'Retrieves organisation data by ODS code'
          }
        }

        controller updateOrgController "Commands" {
          description 'Processes any organisation updates on FTRS data'

          lambda addOrg "Add new Organisation" {
            description 'Adds a new organisation to the FTRS database'
          }

          lambda updateOrg "Update Organisation" {
            description 'Updates an existing organisation in the FTRS database'
          }

          lambda deleteOrg "Delete Organisation" {
            description 'Deletes an existing organisation from the FTRS database'
          }

        }
      }
    }
  }

  apim.dosWriteProxy -> ftrs.apiGateway "Proxies calls to"
  apim.dosWriteProxy -> ftrs.apiGateway "Proxies calls to"
  apim.dosWriteProxy -> ftrs.apiGateway "Proxies calls to"

  ftrs.apiGateway -> addOrg "Proxies add calls to"
  ftrs.apiGateway -> updateOrg "Proxies update calls to"
  ftrs.apiGateway -> deleteOrg "Proxies delete calls to"

  apim.dosReadProxy -> ftrs.apiGateway "Proxies calls to"
  ftrs.apiGateway -> orgByOdsCode "Proxies read calls to"

  orgByOdsCode -> ftrs.db.orgTable "Queries data from"

  addOrg -> ftrs.assuranceQueue "Enqueues in"
  updateOrg -> ftrs.assuranceQueue "Enqueues in"
  deleteOrg -> ftrs.assuranceQueue "Enqueues in"
}
