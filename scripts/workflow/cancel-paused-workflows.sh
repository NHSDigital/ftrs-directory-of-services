#! /bin/bash

# fail on first error
set -e
# This script generates a git tag name
# The format for the tag is $WORKSPACE-$COMMIT_HASH_SHORT or $WORKSPACE (see below)
# Where
# WORKSPACE is the workspace that we are generating the tag for. This really equates to the Jira task number
# USE_COMMIT_HASH if set will use the commit hash to generate the tag
# COMMIT_HASH - pass in the commit hash at head of branch not commit hash generated by github pr process
# see https://stackoverflow.com/questions/68061051/get-commit-sha-in-github-actions

EXPORTS_SET=0

if [ -z "$REPO" ] ; then
    echo REPO not set
    EXPORTS_SET=1
fi

if [ $EXPORTS_SET = 1 ] ; then
  echo One or more parameters not set
  exit 1
fi

export THRESHOLD_SECONDS="${THRESHOLD_SECONDS:-86400}"  # Default to 24 hours if not set
export MAX_RUNS="${MAX_RUNS:-3}"  # Default to 1 runs if not set

echo "List a maximum of $MAX_RUNS workflows in repository $REPO that have been paused more than $THRESHOLD_SECONDS seconds : "

NOW=$(date +%s) # Current time in seconds since epoch
echo "$NOW"
# run="[{\"createdAt\":\"2025-07-18T20:54:43Z\",\"databaseId\":16380132133,\"displayTitle\":\"FDOS-362 Some text\",\"name\":\"Application Deployment Pipeline\",\"status\":\"waiting\"}]"
# echo "$run"

# ID=$(echo "$run" | jq -r '.[0].databaseId')
# TITLE=$(echo "$run" | jq -r  '.[0].displayTitle')
# CREATED_AT=$(echo "$run" | jq -r '.[0].createdAt')
# CREATED_AT_SECONDS=$(date -d "$CREATED_AT" +%s)
# AGE_IN_SECONDS=$((NOW - CREATED_AT_SECONDS))
# echo "Created at seconds: $CREATED_AT_SECONDS"
# echo "Age in seconds: $AGE_IN_SECONDS"

# run="[{\"createdAt\":\"2025-07-19T10:28:45Z\",\"databaseId\":16387763529,\"displayTitle\":\"FDOS-434 Correct ref script\",\"name\":\"Application Deployment Pipeline\",\"status\":\"waiting\"},{\"createdAt\":\"2025-07-19T10:24:07Z\",\"databaseId\":16387727447,\"displayTitle\":\"FDOS-434 Correct jq syntax\",\"name\":\"Application Deployment Pipeline\",\"status\":\"waiting\"},{\"createdAt\":\"2025-07-19T09:47:33Z\",\"databaseId\":16387451449,\"displayTitle\":\"FDOS-434 Restrict list by status\",\"name\":\"Application Deployment Pipeline\",\"status\":\"waiting\"}]"

# items=$(echo "$run" | jq -c -r '.[]')
# for workflow in "${items[@]}"; do
#     echo "$workflow"
#     # whatever you are trying to do ...
# done

# while read -r run;\
#   do
#     echo "Processing workflow run: $run"
#   done

# exit 0
# ==========
runs=$(gh run list --status "waiting" --repo "$REPO" --limit "$MAX_RUNS" --json databaseId,status,createdAt,displayTitle,name)

items=$(echo "$runs" | jq -c -r '.[]')
for run in "${items[@]}"; do
      echo "Processing workflow run: $run"; \
      ID=$(echo "$run" | jq -r '.[0].databaseId') \
      TITLE=$(echo "$run" | jq -r '.[0].displayTitle') \
      CREATED_AT=$(echo "$run" | jq -r '.[0].createdAt')
      echo "$ID - $TITLE - $CREATED_AT"

      # Convert createdAt to seconds since epoch
      CREATED_AT_SECONDS=$(date -d "$CREATED_AT" +%s)

      if [[ -z "$CREATED_AT_SECONDS" ]]; then
        echo "Error: Unable to parse createdAt for workflow $ID. Please check the date format."
        continue
      fi

      AGE_IN_SECONDS=$((NOW - CREATED_AT_SECONDS))
      echo "$AGE_IN_SECONDS seconds since workflow $ID ($TITLE) was created."

      if (( AGE_IN_SECONDS > THRESHOLD_SECONDS )); then
        echo "Cancelling workflow $ID ($TITLE) has been paused for more than $THRESHOLD_SECONDS seconds."
        # TODO Uncomment the next line to actually cancel the workflow
        # gh run cancel "$ID" --repo "$REPO"
      else
        echo "Workflow $ID ($TITLE) has been paused for $AGE_IN_SECONDS seconds, which is within the threshold of $THRESHOLD_SECONDS seconds."
      fi
    done
echo "End"

# ==========



# gh run list --status "waiting" --repo "$REPO" --limit "$MAX_RUNS" --json databaseId,status,createdAt,displayTitle,name \
#   | while read -r run; \
#     do \
#       echo "Processing workflow run: $run"; \
#       ID=$(echo "$run" | jq -r '.[0].databaseId') \
#       TITLE=$(echo "$run" | jq -r '.[0].displayTitle') \
#       CREATED_AT=$(echo "$run" | jq -r '.[0].createdAt')
#       echo "$ID - $TITLE - $CREATED_AT"

#       # Convert createdAt to seconds since epoch
#       CREATED_AT_SECONDS=$(date -d "$CREATED_AT" +%s)

#       if [[ -z "$CREATED_AT_SECONDS" ]]; then
#         echo "Error: Unable to parse createdAt for workflow $ID. Please check the date format."
#         continue
#       fi

#       AGE_IN_SECONDS=$((NOW - CREATED_AT_SECONDS))
#       echo "$AGE_IN_SECONDS seconds since workflow $ID ($TITLE) was created."

#       if (( AGE_IN_SECONDS > THRESHOLD_SECONDS )); then
#         echo "Cancelling workflow $ID ($TITLE) has been paused for more than $THRESHOLD_SECONDS seconds."
#         # TODO Uncomment the next line to actually cancel the workflow
#         # gh run cancel "$ID" --repo "$REPO"
#       else
#         echo "Workflow $ID ($TITLE) has been paused for $AGE_IN_SECONDS seconds, which is within the threshold of $THRESHOLD_SECONDS seconds."
#       fi
#     done
# echo "End"
