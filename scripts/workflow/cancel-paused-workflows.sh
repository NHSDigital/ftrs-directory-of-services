#! /bin/bash

# fail on first error
set -e
# This script generates a git tag name
# The format for the tag is $WORKSPACE-$COMMIT_HASH_SHORT or $WORKSPACE (see below)
# Where
# WORKSPACE is the workspace that we are generating the tag for. This really equates to the Jira task number
# USE_COMMIT_HASH if set will use the commit hash to generate the tag
# COMMIT_HASH - pass in the commit hash at head of branch not commit hash generated by github pr process
# see https://stackoverflow.com/questions/68061051/get-commit-sha-in-github-actions

EXPORTS_SET=0

if [ -z "$REPO" ] ; then
    echo REPO not set
    EXPORTS_SET=1
fi

if [ $EXPORTS_SET = 1 ] ; then
  echo One or more parameters not set
  exit 1
fi

export THRESHOLD_SECONDS="${THRESHOLD_SECONDS:-86400}"  # Default to 24 hours if not set
export MAX_RUNS="${MAX_RUNS:-1}"  # Default to 1 runs if not set

echo "List a maximum of $MAX_RUNS workflows in repository $REPO that have been paused more than $THRESHOLD_SECONDS seconds : "

NOW=$(date +%s) # Current time in seconds since epoch

gh run list --repo "$REPO" --limit "$MAX_RUNS" --json databaseId,status,createdAt,displayTitle,name \
  | jq -c '.[]| select(.status == "waiting")' | while read -r run; do ID=$(echo "$run" | jq -r '.databaseId')
  TITLE=$(echo "$run" | jq -r '.displayTitle')
  CREATED_AT=$(echo "$run" | jq -r '.createdAt')

# Convert createdAt to seconds since epoch
CREATED_AT_SECONDS=$(date -d "$CREATED_AT" +%s 2>dev/null)

if [[ -z "$CREATED_AT_SECONDS" ]]; then
  echo "Error: Unable to parse createdAt for workflow $ID. Please check the date format."
  continue
fi

AGE_IN_SECONDS=$((NOW - CREATED_AT_SECONDS))

if (( AGE_IN_SECONDS > THRESHOLD_SECONDS )); then
  echo "Cancelling workflow $ID ($TITLE) has been paused for more than $THRESHOLD_SECONDS seconds."
  # gh run cancel "$ID" --repo "$REPO"
else
  echo "Workflow $ID ($TITLE) has been paused for $AGE_IN_SECONDS seconds, which is within the threshold of $THRESHOLD_SECONDS seconds."
fi
done
