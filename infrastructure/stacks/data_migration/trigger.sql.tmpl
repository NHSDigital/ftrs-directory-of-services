-- Enable the aws_lambda extension if not already present
CREATE EXTENSION IF NOT EXISTS aws_lambda CASCADE;

-- Grant access to the aws_lambda schema and functions to a specific user
GRANT USAGE ON SCHEMA aws_lambda TO ${user};
GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA aws_lambda TO ${user};


DROP FUNCTION IF EXISTS pathwaysdos.lambda_notify() CASCADE;

-- Trigger function to notify AWS Lambda on INSERT/UPDATE/DELETE
CREATE OR REPLACE FUNCTION pathwaysdos.lambda_notify()
RETURNS trigger
LANGUAGE plpgsql
AS $function$
DECLARE
    payload json;
BEGIN
    IF (TG_OP = 'DELETE') THEN
        payload := json_build_object(
            'table_name', TG_TABLE_NAME,
            'method', 'delete',
            'record_id', COALESCE(OLD.id::text, '0')
        );

        PERFORM aws_lambda.invoke(
            '${lambda_arn}',
            payload,
            '${aws_region}'
        );

        RETURN OLD;
    ELSE
        payload := json_build_object(
            'table_name', TG_TABLE_NAME,
            'method', TG_OP,
            'record_id', COALESCE(NEW.id::text, '0')
        );

        PERFORM aws_lambda.invoke(
            '${lambda_arn}',
            payload,
            '${aws_region}'
        );

        RETURN NEW;
    END IF;
END;
$function$;


-- Trigger on the services table to invoke Lambda on row-level changes
CREATE TRIGGER services_lambda_notify
AFTER INSERT OR UPDATE OR DELETE
ON pathwaysdos.services
FOR EACH ROW
EXECUTE FUNCTION pathwaysdos.lambda_notify();
